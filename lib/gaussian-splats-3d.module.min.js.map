{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/SplatBuffer.js","../src/AbortablePromise.js","../src/Util.js","../src/SplatCompressor.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/Constants.js","../src/worker/SortWorker.js","../src/worker/sorter.wasm","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["import * as THREE from 'three';\n\nlet fbf;\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerColor: 4,\n            BytesPerRotation: 16,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerColor: 4,\n            BytesPerRotation: 8,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n\n    static HeaderSizeBytes = 1024;\n\n    constructor(bufferData) {\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n        this.versionMajor = this.headerArrayUint8[0];\n        this.versionMinor = this.headerArrayUint8[1];\n        this.headerExtraK = this.headerArrayUint8[2];\n        this.compressionLevel = this.headerArrayUint8[3];\n        this.splatCount = this.headerArrayUint32[1];\n        this.bucketSize = this.headerArrayUint32[2];\n        this.bucketCount = this.headerArrayUint32[3];\n        this.bucketBlockSize = this.headerArrayFloat32[4];\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\n        this.bytesPerBucket = this.headerArrayUint32[5];\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\n\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\n\n        fbf = this.fbf.bind(this);\n\n        this.linkBufferArrays();\n    }\n\n    linkBufferArrays() {\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\n        this.rotationArray = new FloatArray(this.splatBufferData,\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    getHeaderBufferData() {\n        return this.headerBufferData;\n    }\n\n    getSplatBufferData() {\n        return this.splatBufferData;\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getSplatCenter(index, outCenter, transform) {\n        let bucket = [0, 0, 0];\n        const centerBase = index * SplatBuffer.CenterComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\n        } else {\n            outCenter.x = this.centerArray[centerBase];\n            outCenter.y = this.centerArray[centerBase + 1];\n            outCenter.z = this.centerArray[centerBase + 2];\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n\n        return function(index, outScale, outRotation, transform) {\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\n            outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\n            outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\n                            fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\n            if (transform) {\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            }\n        };\n\n    }();\n\n    getSplatColor(index, outColor, transform) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\n        // TODO: apply transform for spherical harmonics\n    }\n\n    fillSplatCenterArray(outCenterArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n        let bucket = [0, 0, 0];\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const centerSrcBase = i * SplatBuffer.CenterComponentCount;\n            const centerDestBase = (i + destOffset) * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel > 0) {\n                const bucketIndex = Math.floor(i / this.bucketSize);\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n                const sf = this.compressionScaleFactor;\n                const sr = this.compressionScaleRange;\n                center.x = (this.centerArray[centerSrcBase] - sr) * sf + bucket[0];\n                center.y = (this.centerArray[centerSrcBase + 1] - sr) * sf + bucket[1];\n                center.z = (this.centerArray[centerSrcBase + 2] - sr) * sf + bucket[2];\n            } else {\n                center.x = this.centerArray[centerSrcBase];\n                center.y = this.centerArray[centerSrcBase + 1];\n                center.z = this.centerArray[centerSrcBase + 2];\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    fillSplatCovarianceArray(covarianceArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\n                         fbf(this.rotationArray[rotationBase + 2]),\n                         fbf(this.rotationArray[rotationBase + 3]),\n                         fbf(this.rotationArray[rotationBase]));\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n            const covBase = SplatBuffer.CovarianceSizeFloats * (i + destOffset);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            covarianceArray[covBase] = transformedCovariance.elements[0];\n            covarianceArray[covBase + 1] = transformedCovariance.elements[3];\n            covarianceArray[covBase + 2] = transformedCovariance.elements[6];\n            covarianceArray[covBase + 3] = transformedCovariance.elements[4];\n            covarianceArray[covBase + 4] = transformedCovariance.elements[7];\n            covarianceArray[covBase + 5] = transformedCovariance.elements[8];\n        }\n    }\n\n    fillSplatColorArray(outColorArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const colorSrcBase = i * SplatBuffer.ColorComponentCount;\n            const colorDestBase = (i + destOffset) * SplatBuffer.ColorComponentCount;\n            outColorArray[colorDestBase] = this.colorArray[colorSrcBase];\n            outColorArray[colorDestBase + 1] = this.colorArray[colorSrcBase + 1];\n            outColorArray[colorDestBase + 2] = this.colorArray[colorSrcBase + 2];\n            outColorArray[colorDestBase + 3] = this.colorArray[colorSrcBase + 3];\n            // TODO: implement application of transform for spherical harmonics\n        }\n    }\n}\n","/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n    static resolve(data) {\n        return new AbortablePromise((resolve) => {\n            resolve(data);\n        });\n    }\n\n    static reject(error) {\n        return new AbortablePromise((resolve, reject) => {\n            reject(error);\n        });\n    }\n}\n","import { AbortablePromise } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc('Fetch aborted');\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk);\n                        }\n                        const buffer = new Blob(chunks).arrayBuffer();\n                        resolve(buffer);\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    chunks.push(chunk);\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk);\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { clamp } from './Util.js';\n\nconst SplatBufferBucketSize = 256;\nconst SplatBufferBucketBlockSize = 5.0;\n\nclass UncompressedSplatArray {\n\n    constructor() {\n        this.splatCount = 0;\n        this.scale_0 = [];\n        this.scale_1 = [];\n        this.scale_2 = [];\n        this.rot_0 = [];\n        this.rot_1 = [];\n        this.rot_2 = [];\n        this.rot_3 = [];\n        this.x = [];\n        this.y = [];\n        this.z = [];\n        this.f_dc_0 = [];\n        this.f_dc_1 = [];\n        this.f_dc_2 = [];\n        this.opacity = [];\n    }\n\n    addSplat(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\n        this.x.push(x);\n        this.y.push(y);\n        this.z.push(z);\n        this.scale_0.push(scale0);\n        this.scale_1.push(scale1);\n        this.scale_2.push(scale2);\n        this.rot_0.push(rot0);\n        this.rot_1.push(rot1);\n        this.rot_2.push(rot2);\n        this.rot_3.push(rot3);\n        this.f_dc_0.push(r);\n        this.f_dc_1.push(g);\n        this.f_dc_2.push(b);\n        this.opacity.push(opacity);\n        this.splatCount++;\n    }\n}\n\nexport class SplatCompressor {\n\n    constructor(compressionLevel = 0, minimumAlpha = 1, blockSize = SplatBufferBucketBlockSize, bucketSize = SplatBufferBucketSize) {\n        this.compressionLevel = compressionLevel;\n        this.minimumAlpha = minimumAlpha;\n        this.bucketSize = bucketSize;\n        this.blockSize = blockSize;\n    }\n\n    static createEmptyUncompressedSplatArray() {\n        return new UncompressedSplatArray();\n    }\n\n    uncompressedSplatArrayToSplatBuffer(splatArray) {\n\n        const validSplats = SplatCompressor.createEmptyUncompressedSplatArray();\n        validSplats.addSplat(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);\n\n        for (let i = 0; i < splatArray.splatCount; i++) {\n            let alpha;\n            if (splatArray['opacity'][i]) {\n                alpha = splatArray['opacity'][i];\n            } else {\n                alpha = 255;\n            }\n            if (alpha >= this.minimumAlpha) {\n                validSplats.addSplat(splatArray['x'][i], splatArray['y'][i], splatArray['z'][i],\n                                     splatArray['scale_0'][i], splatArray['scale_1'][i], splatArray['scale_2'][i],\n                                     splatArray['rot_0'][i], splatArray['rot_1'][i], splatArray['rot_2'][i], splatArray['rot_3'][i],\n                                     splatArray['f_dc_0'][i], splatArray['f_dc_1'][i], splatArray['f_dc_2'][i], splatArray['opacity'][i]);\n            }\n        }\n\n        const buckets = this.computeBucketsForUncompressedSplatArray(validSplats);\n\n        const paddedSplatCount = buckets.length * this.bucketSize;\n        const headerSize = SplatBuffer.HeaderSizeBytes;\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\n        header[3] = this.compressionLevel;\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\n\n        let bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        let bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        let bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        let bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\n\n        const blockHalfSize = this.blockSize / 2.0;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n        const bucketCenter = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n        let outSplatIndex = 0;\n        for (let b = 0; b < buckets.length; b++) {\n            const bucket = buckets[b];\n            bucketCenter.fromArray(bucket.center);\n            for (let i = 0; i < bucket.splats.length; i++) {\n                let row = bucket.splats[i];\n                let invalidSplat = false;\n                if (row === 0) {\n                    invalidSplat = true;\n                }\n\n                if (this.compressionLevel === 0) {\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scale = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    if (validSplats['scale_0'][row] !== undefined) {\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\n                        quat.normalize();\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\n                        scale.set([validSplats['scale_0'][row], validSplats['scale_1'][row], validSplats['scale_2'][row]]);\n                    } else {\n                        scale.set([0.01, 0.01, 0.01]);\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\n                    }\n                    center.set([validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]]);\n                } else {\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scale = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n                    if (validSplats['scale_0'][row] !== undefined) {\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\n                        quat.normalize();\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\n                        scale.set([thf(validSplats['scale_0'][row]), thf(validSplats['scale_1'][row]), thf(validSplats['scale_2'][row])]);\n                    } else {\n                        scale.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        rot.set([thf(1.), 0, 0, 0]);\n                    }\n                    bucketCenterDelta.set(validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]).sub(bucketCenter);\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                }\n\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\n                if (invalidSplat) {\n                    rgba[0] = 255;\n                    rgba[1] = 0;\n                    rgba[2] = 0;\n                    rgba[3] = 0;\n                } else {\n                    if (validSplats['f_dc_0'][row] !== undefined) {\n                        rgba.set([validSplats['f_dc_0'][row], validSplats['f_dc_1'][row], validSplats['f_dc_2'][row]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (validSplats['opacity'][row] !== undefined) {\n                        rgba[3] = validSplats['opacity'][row];\n                    } else {\n                        rgba[3] = 255;\n                    }\n                }\n\n                outSplatIndex++;\n            }\n        }\n\n        const bytesPerBucket = 12;\n        const bucketsSize = bytesPerBucket * buckets.length;\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\n\n        const headerArrayUint32 = new Uint32Array(header.buffer);\n        const headerArrayFloat32 = new Float32Array(header.buffer);\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\n        if (this.compressionLevel > 0) {\n            unifiedBufferSize += bucketsSize;\n            headerArrayUint32[2] = this.bucketSize;\n            headerArrayUint32[3] = buckets.length;\n            headerArrayFloat32[4] = this.blockSize;\n            headerArrayUint32[5] = bytesPerBucket;\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        }\n\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\n                    colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\n                    rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\n\n        if (this.compressionLevel > 0) {\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\n            for (let i = 0; i < buckets.length; i++) {\n                const bucket = buckets[i];\n                const base = i * 3;\n                bucketArray[base] = bucket.center[0];\n                bucketArray[base + 1] = bucket.center[1];\n                bucketArray[base + 2] = bucket.center[2];\n            }\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    computeBucketsForUncompressedSplatArray(splatArray) {\n        let splatCount = splatArray.splatCount;\n        const blockSize = this.blockSize;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\n            const xBlock = Math.ceil((center[0] - min.x) / blockSize);\n            const yBlock = Math.ceil((center[1] - min.y) / blockSize);\n            const zBlock = Math.ceil((center[2] - min.z) / blockSize);\n\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= this.bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        // fill partially full buckets with invalid splats (splat 0)\n        // to get them up to this.bucketSize\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    while (bucket.splats.length < this.bucketSize) {\n                        bucket.splats.push(0);\n                    }\n                    fullBuckets.push(bucket);\n                }\n            }\n        }\n\n        return fullBuckets;\n    }\n}\n","import { SplatCompressor } from './SplatCompressor.js';\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\n\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n            if (endHeaderTestText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize) {\n\n        const startTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\n\n        for (let row = 0; row < splatCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            if (rawVertex['scale_0'] !== undefined) {\n                splatArray['scale_0'][row] = Math.exp(rawVertex['scale_0']);\n                splatArray['scale_1'][row] = Math.exp(rawVertex['scale_1']);\n                splatArray['scale_2'][row] = Math.exp(rawVertex['scale_2']);\n            } else {\n                splatArray['scale_0'][row] = 0.01;\n                splatArray['scale_1'][row] = 0.01;\n                splatArray['scale_2'][row] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                splatArray['f_dc_0'][row] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                splatArray['f_dc_1'][row] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                splatArray['f_dc_2'][row] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else {\n                splatArray['f_dc_0'][row] = 0;\n                splatArray['f_dc_1'][row] = 0;\n                splatArray['f_dc_2'][row] = 0;\n            }\n            if (rawVertex['opacity'] !== undefined) {\n                splatArray['opacity'][row] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            splatArray['rot_0'][row] = rawVertex['rot_0'];\n            splatArray['rot_1'][row] = rawVertex['rot_1'];\n            splatArray['rot_2'][row] = rawVertex['rot_2'];\n            splatArray['rot_3'][row] = rawVertex['rot_3'];\n\n            splatArray['x'][row] = rawVertex['x'];\n            splatArray['y'][row] = rawVertex['y'];\n            splatArray['z'][row] = rawVertex['z'];\n            splatArray.splatCount++;\n        }\n\n        const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\n        const splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\n\n        console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\n\n        const endTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT complete!');\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n\n        return splatBuffer;\n    }\n\n}\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\n        return fetchWithProgress(fileName, onProgress).then((plyFileData) => {\n            const plyParser = new PlyParser(plyFileData);\n            const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize);\n            this.splatBuffer = splatBuffer;\n            return splatBuffer;\n        });\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { SplatCompressor } from './SplatCompressor.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    static isFileSplatFormat(fileName) {\n        return SplatLoader.isCustomSplatFormat(fileName) || SplatLoader.isStandardSplatFormat(fileName);\n    }\n\n    static isCustomSplatFormat(fileName) {\n        return fileName.endsWith('.ksplat');\n    }\n\n    static isStandardSplatFormat(fileName) {\n        return fileName.endsWith('.splat');\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\n        return fetchWithProgress(fileName, onProgress).then((bufferData) => {\n            let splatBuffer;\n            if (SplatLoader.isCustomSplatFormat(fileName)) {\n                splatBuffer = new SplatBuffer(bufferData);\n            } else {\n                const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\n                const splatArray = SplatLoader.parseStandardSplatToUncompressedSplatArray(bufferData);\n                splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\n            }\n            return splatBuffer;\n        });\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const InBufferRowSizeBytes = 32;\n        const splatCount = inBuffer.byteLength / InBufferRowSizeBytes;\n\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inCenterSizeBytes = 3 * 4;\n            const inScaleSizeBytes = 3 * 4;\n            const inColorSizeBytes = 4;\n            const inBase = i * InBufferRowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + inCenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes + inColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplat(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    downloadFile(fileName) {\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message, container) {\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerDivContainerOuter = document.createElement('div');\n        this.spinnerDivContainerOuter.className = 'outerContainer';\n        this.spinnerDivContainerOuter.style.display = 'none';\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDivContainer.className = 'container';\n\n        this.spinnerDiv = document.createElement('div');\n        this.spinnerDiv.className = 'loader';\n\n        this.messageDiv = document.createElement('div');\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer);\n        this.container.appendChild(this.spinnerDivContainerOuter);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width: 180px;\n            }\n\n            .outerContainer {\n                width: 100%;\n                height: 100%;\n            }\n\n            .container {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerDivContainerOuter.appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainerOuter.style.display = 'none';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerDivContainerOuter);\n        }\n        this.container = container;\n        this.container.appendChild(this.spinnerDivContainerOuter);\n        this.spinnerDivContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n    }\n\n    setMessage(msg) {\n        this.messageDiv.innerHTML = msg;\n    }\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\n\nexport class SceneHelper {\n\n    constructor(scene) {\n        this.scene = scene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyMaterial = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.scene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            this.meshCursor.children.forEach((child) => {\n                child.geometry.dispose();\n                child.material.dispose();\n            });\n            this.scene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            const sphereMesh = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n            this.focusMarker = sphereMesh;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            this.focusMarker.position.copy(tempPosition);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        const planeGeometry = new THREE.PlaneGeometry(1, 1);\n        planeGeometry.rotateX(-Math.PI / 2);\n        const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n        planeMaterial.transparent = true;\n        planeMaterial.opacity = 0.6;\n        planeMaterial.depthTest = false;\n        planeMaterial.depthWrite = false;\n        planeMaterial.side = THREE.DoubleSide;\n        const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n        const arrowDir = new THREE.Vector3(0, 1, 0);\n        arrowDir.normalize();\n        const arrowOrigin = new THREE.Vector3(0, 0, 0);\n        const arrowLength = 0.5;\n        const arrowRadius = 0.01;\n        const arrowColor = 0x00dd00;\n        const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n        this.controlPlane = new THREE.Object3D();\n        this.controlPlane.add(planeMesh);\n        this.controlPlane.add(arrowHelper);\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.scene.add(this.debugRoot);\n        this.scene.add(this.secondaryDebugRoot);\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n    }\n\n    set(origin, normal, distance) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction) {\n        this.ray = new Ray(origin, direction);\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const localRay = new Ray();\n\n        return function(splatMesh, outHits = []) {\n            fromLocal.copy(splatMesh.matrixWorld);\n            toLocal.copy(fromLocal).invert();\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\n\n            const splatTree = splatMesh.getSplatTree();\n            if (splatTree.rootNode) {\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\n            }\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n            outHits.forEach((hit) => {\n                hit.origin.applyMatrix4(fromLocal);\n                hit.normal.transformDirection(fromLocal);\n            });\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        // Used for raycasting against splat ellipsoid\n        /*\n        const origin = new THREE.Vector3(0, 0, 0);\n        const tempRotationMatrix = new THREE.Matrix4();\n        const tempScaleMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n        */\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    // Simple approximated sphere intersection\n                    const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                    if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                        outHits.push(tempHit.clone());\n                    }\n\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\n                    // as the approximated sphere approach\n                    /*\n                    splatBuffer.getRotation(splatLocalIndex, tempRotation, splatTransform);\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\n                    fromSphereSpace.copy(tempScaleMatrix).premultiply(tempRotationMatrix);\n                    toSphereSpace.copy(fromSphereSpace).invert();\n                    tempRay.origin.copy(this.ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                    tempRay.direction.copy(this.ray.direction).transformDirection(toSphereSpace).normalize();\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                        const hitClone = tempHit.clone();\n                        hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                        outHits.push(hitClone);\n                    }\n                    */\n\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class SplatTreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTreeNode } from './SplatTreeNode.js';\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.splatMesh = [];\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n    processSplatMesh(splatMesh, filterFunc = () => true) {\n        const center = new THREE.Vector3();\n        this.splatMesh = splatMesh;\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n        this.globalSplatIndexToLocalSplatIndexMap = {};\n        this.globalSplatIndexToSplatBufferIndexMap = {};\n\n        let validSplatCount = 0;\n        const indexes = [];\n        const splatCount = this.splatMesh.getSplatCount();\n        for (let i = 0; i < splatCount; i++) {\n            if (filterFunc(i)) {\n                this.splatMesh.getSplatCenter(i, center);\n                if (validSplatCount === 0 || center.x < this.sceneMin.x) this.sceneMin.x = center.x;\n                if (validSplatCount === 0 || center.x > this.sceneMax.x) this.sceneMax.x = center.x;\n                if (validSplatCount === 0 || center.y < this.sceneMin.y) this.sceneMin.y = center.y;\n                if (validSplatCount === 0 || center.y > this.sceneMax.y) this.sceneMax.y = center.y;\n                if (validSplatCount === 0 || center.z < this.sceneMin.z) this.sceneMin.z = center.z;\n                if (validSplatCount === 0 || center.z > this.sceneMax.z) this.sceneMax.z = center.z;\n                validSplatCount++;\n                indexes.push(i);\n            }\n        }\n\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\n\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\n        this.rootNode.data = {\n            'indexes': indexes\n        };\n        this.processNode(this.rootNode, splatMesh);\n    }\n\n    processNode(node, splatMesh) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < this.maxCentersPerNode || node.depth > this.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!this.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    this.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            this.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            this.splatMesh.getSplatCenter(splatGlobalIndex, center);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            this.processNode(child, splatMesh);\n        }\n    }\n\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        return visitLeavesFromNode(this.rootNode, visitFunc);\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\n/**\n * SplatMesh: Container for one or more SplatBuffer instances, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false) {\n        super(dummyGeometry, dummyMaterial);\n        this.renderer = undefined;\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        this.devicePixelRatio = devicePixelRatio;\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        this.splatBuffers = [];\n        this.splatBufferOptions = [];\n        this.splatBufferTransforms = [];\n        this.splatTree = null;\n        this.splatDataTextures = null;\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = {};\n        this.globalSplatIndexToSplatBufferIndexMap = {};\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial() {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        const vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(modelViewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.00); // prevent negative eigen value\n\n                const float maxSplatSize = 1024.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = maxSplatCount;\n\n        return geometry;\n    }\n\n    /**\n     * Build a Three.js transformation matrix for each splat buffer based on options (position, scale, rotation)\n     * passed to the splat mesh during the build process. These are all optional and allow for the customization of\n     * a given splat buffer's position, scale, and orientation relative to the others.\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {Array<THREE.Matrix4>} splatBufferTransforms Existing transforms, if there are any\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildSplatBufferTransforms(splatBufferOptions, splatBufferTransforms = null) {\n        splatBufferTransforms = splatBufferTransforms || [];\n        splatBufferTransforms.length = splatBufferOptions.length;\n        for (let i = 0; i < splatBufferOptions.length; i++) {\n            if (!splatBufferTransforms[i]) {\n                const options = splatBufferOptions[i];\n                if (options) {\n                    let positionArray = options['position'] || [0, 0, 0];\n                    let rotationArray = options['rotation'] || [0, 0, 0, 1];\n                    let scaleArray = options['scale'] || [1, 1, 1];\n                    const position = new THREE.Vector3().fromArray(positionArray);\n                    const rotation = new THREE.Quaternion().fromArray(rotationArray);\n                    const scale = new THREE.Vector3().fromArray(scaleArray);\n                    const splatBufferTransform = new THREE.Matrix4();\n                    splatBufferTransform.compose(position, rotation, scale);\n                    splatBufferTransforms[i] = splatBufferTransform;\n                }\n            }\n        }\n        return splatBufferTransforms;\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single splat buffer.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = new Map();\n        const splatBufferIndexMap = new Map();\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const splatCount = splatBuffer.getSplatCount();\n            for (let i = 0; i < splatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                splatBufferIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            splatBufferIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\n     * @return {SplatTree}\n     */\n    static buildSplatTree(splatMesh) {\n        // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n        // be configured on a per-scene basis\n        const splatTree = new SplatTree(8, 1000);\n        console.time('SplatTree build');\n        const splatColor = new THREE.Vector4();\n        splatTree.processSplatMesh(splatMesh, (splatIndex) => {\n            splatMesh.getSplatColor(splatIndex, splatColor);\n            const splatBufferIndex = splatMesh.getSplatBufferIndexForSplat(splatIndex);\n            const splatBufferOptions = splatMesh.splatBufferOptions[splatBufferIndex];\n            return splatColor.w >= (splatBufferOptions.splatAlphaRemovalThreshold || 1);\n        });\n        console.timeEnd('SplatTree build');\n\n        let leavesWithVertices = 0;\n        let avgSplatCount = 0;\n        let maxSplatCount = 0;\n        let nodeCount = 0;\n\n        splatTree.visitLeaves((node) => {\n            const nodeSplatCount = node.data.indexes.length;\n            if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n            }\n        });\n        console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n        avgSplatCount = avgSplatCount / nodeCount;\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\n        console.log(`Total splat count: ${splatMesh.getSplatCount()}`);\n        return splatTree;\n    }\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} splatBufferOptions Dynamic options for each splat buffer {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {Boolean} keepExistingSplatBufferTransforms If the transform for a splat buffer has been changed since a\n     *                                                    previous call to build(), this flag says to preserve it. The assumption\n     *                                                    is that the current call to build() will be using the same splat buffers\n     *                                                    as the previous call.\n     */\n    build(splatBuffers, splatBufferOptions, keepExistingSplatBufferTransforms = true) {\n        this.disposeMeshData();\n        const totalSplatCount = SplatMesh.getTotalSplatCountForSplatBuffers(splatBuffers);\n        this.splatBufferTransforms = SplatMesh.buildSplatBufferTransforms(splatBufferOptions, keepExistingSplatBufferTransforms ?\n                                                                          this.splatBufferTransforms : null);\n        this.geometry = SplatMesh.buildGeomtery(totalSplatCount);\n        this.material = SplatMesh.buildMaterial();\n        const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n        this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n        this.globalSplatIndexToSplatBufferIndexMap = indexMaps.splatBufferIndexMap;\n        this.splatTree = SplatMesh.buildSplatTree(this);\n\n        this.splatBuffers = splatBuffers;\n        this.splatBufferOptions = splatBufferOptions;\n\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        this.resetDataFromSplatBuffer();\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        if (this.enableDistancesComputationOnGPU) {\n            this.disposeDistancesComputationGPUResources();\n        }\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n        this.splatTree = null;\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    /**\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\n     */\n    resetDataFromSplatBuffer() {\n        this.uploadSplatDataToTextures();\n        if (this.enableDistancesComputationOnGPU) {\n            this.updateGPUCentersBufferForDistancesComputation();\n        }\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     */\n    uploadSplatDataToTextures() {\n\n        const splatCount = this.getSplatCount();\n\n        const covariances = new Float32Array(splatCount * 6);\n        const centers = new Float32Array(splatCount * 3);\n        const colors = new Uint8Array(splatCount * 4);\n        this.fillSplatDataArrays(covariances, centers, colors);\n\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\n            covariancesTextureSize.y *= 2;\n        }\n\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\n            centersColorsTextureSize.y *= 2;\n        }\n\n        let covariancesTexture;\n        let paddedCovariances;\n        if (this.halfPrecisionCovariancesOnGPU) {\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            for (let i = 0; i < covariances.length; i++) {\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(covariances[i]);\n            }\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\n        } else {\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(covariances);\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\n        }\n        covariancesTexture.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\n\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(colors[colorsBase], colors[colorsBase + 1],\n                                                                 colors[colorsBase + 2], colors[colorsBase + 3]);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColorsTexture.internalFormat = 'RGBA32UI';\n        centersColorsTexture.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covariancesTexture,\n                'size': covariancesTextureSize\n            },\n            'centerColors': {\n                'data': paddedCenterColors,\n                'texture': centersColorsTexture,\n                'size': centersColorsTextureSize\n            }\n        };\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(2.0 / viewport.x, 2.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForSplatBuffers(this.splatBuffers);\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                this.updateGPUCentersBufferForDistancesComputation();\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentRenderer;\n        let currentSplatCount;\n\n        return function() {\n            const splatCount = this.getSplatCount();\n\n            if (!this.renderer || (currentRenderer === this.renderer && currentSplatCount === splatCount)) return;\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\n            const rebuildBuffers = currentSplatCount !== splatCount;\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                    in ivec3 center;\n                    uniform ivec3 modelViewProj;\n                    flat out int distance;\n                    void main(void) {\n                        distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                    }\n                `;\n            } else {\n                vsSource =\n                `#version 300 es\n                    in vec3 center;\n                    uniform vec3 modelViewProj;\n                    flat out float distance;\n                    void main(void) {\n                        distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                    }\n                `;\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            this.distancesTransformFeedback.modelViewProjLoc =\n                gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.DYNAMIC_COPY);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            currentRenderer = this.renderer;\n            currentSplatCount = splatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the splat buffers for this mesh.\n     */\n    updateGPUCentersBufferForDistancesComputation() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        if (this.integerBasedDistancesComputation) {\n            const intCenters = this.getIntegerCenters(false);\n            gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\n        } else {\n            const floatCenters = this.getFloatCenters(false);\n            gl.bufferData(gl.ARRAY_BUFFER, floatCenters, gl.STATIC_DRAW);\n        }\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    computeDistancesOnGPU(modelViewProjMatrix, outComputedDistances) {\n\n        if (!this.renderer) return;\n\n        // console.time(\"gpu_compute_distances\");\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n        gl.useProgram(this.distancesTransformFeedback.program);\n\n        gl.enable(gl.RASTERIZER_DISCARD);\n\n        if (this.integerBasedDistancesComputation) {\n            const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n            const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n            gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n        } else {\n            const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n            gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        if (this.integerBasedDistancesComputation) {\n            gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\n        } else {\n            gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n        gl.beginTransformFeedback(gl.POINTS);\n        gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n        gl.endTransformFeedback();\n\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n        gl.disable(gl.RASTERIZER_DISCARD);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n        gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        // console.timeEnd(\"gpu_compute_distances\");\n\n        if (currentProgram) gl.useProgram(currentProgram);\n        if (currentVao) gl.bindVertexArray(currentVao);\n\n    }\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     */\n    getLocalSplatParameters(globalIndex, paramsObj) {\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.splatBufferTransform = this.getSplatBufferTransformForSplat(globalIndex);\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     */\n    fillSplatDataArrays(covariances, centers, colors) {\n        let offset = 0;\n        for (let i = 0; i < this.splatBuffers.length; i++) {\n            const splatBuffer = this.splatBuffers[i];\n            const splatBufferTransform = this.splatBufferTransforms[i];\n            if (covariances) splatBuffer.fillSplatCovarianceArray(covariances, offset, splatBufferTransform);\n            if (centers) splatBuffer.fillSplatCenterArray(centers, offset, splatBufferTransform);\n            if (colors) splatBuffer.fillSplatColorArray(colors, offset, splatBufferTransform);\n            offset += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values.\n     * @return {Int32Array}\n     */\n    getIntegerCenters(padFour) {\n        const splatCount = this.getSplatCount();\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1;\n        }\n        return intCenters;\n    }\n\n\n    /**\n     * Returns an array of splat centers, optionally padded.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values.\n     * @return {Float32Array}\n     */\n    getFloatCenters(padFour) {\n        const splatCount = this.getSplatCount();\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.splatBufferTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.splatBufferTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.splatBufferTransform);\n        };\n\n    }();\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.splatBuffers[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\n    }\n\n    getSplatBufferIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSplatBufferIndexMap[globalIndex];\n    }\n\n    getSplatBufferTransformForSplat(globalIndex) {\n        return this.splatBufferTransforms[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        if (integerBasedSort) {\n            new Int32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        } else {\n            new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        }\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, Constants.DepthMapRange, splatSortCount,\n                                         splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        const transferBuffers = [];\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            const sortedIndexesOut = new Uint32Array(splatRenderCount);\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut.buffer;\n            transferBuffers.push(sortedIndexesOut.buffer);\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage, transferBuffers);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset, splatCount * 4).set(new Float32Array(centers));\n            }\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForViewProjMatrix = integerBasedSort ? (16 * Constants.BytesPerInt) : (16 * Constants.BytesPerFloat);\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForViewProjMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForViewProjMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize\n            }\n        }\n    });\n    return worker;\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0018\u0003`\u0000\u0000`\r\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0007\u0003\u0003\u0000\u0001\u000b�\u0007\u0003\u0001|\u0003}\u0002{ \t \bk!\n\u0002@ \f\u0004@ \u000b\u0004@A����\u0007!\fA����x!\u000b \t \nM\r\u0002 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \f \u0001 \fH\u001b!\f \u0001 \u000b \u0001 \u000bJ\u001b!\u000b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0002\u000bA����\u0007!\fA����x!\u000b \t \nM\r\u0001 \u0005A(j \u0005A\u0018j \u0005�\t\u0002\b�V\u0002\u0000\u0001�V\u0002\u0000\u0002!\u0012 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \f \u0002 \fH\u001b!\f \u0002 \u000b \u0002 \u000bJ\u001b!\u000b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000bE\u0004@ \t \nK\r\u0001A����x!\u000bA����\u0007!\f\f\u0002\u000bA����\u0007!\fA����x!\u000b \t \nM\r\u0001 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj\u0002 \u0002 \u0000 \bj(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\r�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \r�\f\u0001\u000bA����x\u000b\"\b6\u0002\u0000 \b \f \b \fH\u001b!\f \b \u000b \b \u000bJ\u001b!\u000b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0010 \u0005*\u0002\u0018!\u000e \u0005*\u0002\b!\u000fA����\u0007!\fA����x!\u000b \n!\u0005\u0003@\u0002 \u000f \u0001 \u0000 \u0005A\u0002t\"\u0002j(\u0002\u0000A\u0004tj\"\b*\u0002\u0000� \u000e \b*\u0002\u0004�� \u0010 \b*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\r�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \r�\f\u0001\u000bA����x\u000b!\b \u0002 \u0003j \b6\u0002\u0000 \b \f \b \fH\u001b!\f \b \u000b \b \u000bJ\u001b!\u000b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\u000b \t \nK\u0004@ \u0007A\u0001k� \u000b� \f���!\u000e \n!\u000b\u0003@\u0002 \u000e \u0003 \u000bA\u0002tj\"\u0001(\u0002\u0000 \fk��\"\u000f�C\u0000\u0000\u0000O]\u0004@ \u000f�\f\u0001\u000bA����x\u000b!\b \u0001 \b6\u0002\u0000 \u0004 \bA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \u000bA\u0001j\"\u000b \tG\r\u0000\u000b\u000b \u0007A\u0002O\u0004@ \u0004(\u0002\u0000!\u000bA\u0001!\f\u0003@ \u0004 \fA\u0002tj\"\u0001 \u0001(\u0002\u0000 \u000bj\"\u000b6\u0002\u0000 \fA\u0001j\"\f \u0007G\r\u0000\u000b\u000b \nA\u0000J\u0004@ \n!\f\u0003@ \u0006 \fA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \fA\u0001J!\u0002 \u0001!\f \u0002\r\u0000\u000b\u000b \t \nJ\u0004@ \t!\f\u0003@ \u0006 \t \u0004 \u0003 \fA\u0001k\"\fA\u0002t\"\u0005j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0001kA\u0002tj \u0000 \u0005j(\u0002\u00006\u0002\u0000 \u0002 \u0001A\u0001k6\u0002\u0000 \n \fH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise } from './AbortablePromise.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        if (options.halfPrecisionCovariancesOnGPU === undefined || options.halfPrecisionCovariancesOnGPU === null) {\n            options.halfPrecisionCovariancesOnGPU = true;\n        }\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\n\n        // If 'scene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.scene = options.scene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\n            else this.gpuAcceleratedSort = true;\n        }\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        this.controls = null;\n\n        this.splatMesh = new SplatMesh(this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort);\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n        this.infoPanelCells = {};\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            const resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        this.scene = this.scene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.scene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.listenToKeyEvents(window);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n            this.rootElement.addEventListener('pointermove', this.onMouseMove.bind(this), false);\n            this.rootElement.addEventListener('pointerdown', this.onMouseDown.bind(this), false);\n            this.rootElement.addEventListener('pointerup', this.onMouseUp.bind(this), false);\n            window.addEventListener('keydown', this.onKeyDown.bind(this), false);\n        }\n\n        this.setupInfoPanel();\n        this.loadingSpinner.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyP':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.style.display = 'block';\n                    } else {\n                        this.infoPanel.style.display = 'none';\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const intersectionPoint = outHits[0].origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setupInfoPanel() {\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.style.position = 'absolute';\n        this.infoPanel.style.padding = '10px';\n        this.infoPanel.style.backgroundColor = '#cccccc';\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\n        this.infoPanel.style.zIndex = 100;\n        this.infoPanel.style.width = '375px';\n        this.infoPanel.style.fontFamily = 'arial';\n        this.infoPanel.style.fontSize = '10pt';\n        this.infoPanel.style.textAlign = 'left';\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.style.width = '110px';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanel.style.display = 'none';\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\n    }\n\n    updateSplatMeshUniforms = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\n            }\n        };\n\n    }();\n\n    /**\n     * Add a splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    loadFile(path, options = {}) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        if (options.showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (percent, percentLabel) => {\n            if (options.showLoadingSpinner) {\n                if (percent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    const suffix = percentLabel ? `: ${percentLabel}` : `...`;\n                    this.loadingSpinner.setMessage(`Downloading${suffix}`);\n                }\n            }\n            if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\n        };\n        const loadPromise = this.loadFileToSplatBuffer(path, options.splatAlphaRemovalThreshold, downloadProgress);\n        return new AbortablePromise((resolve, reject) => {\n            loadPromise.then((splatBuffer) => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\n                const splatBufferOptions = {\n                    'rotation': options.rotation || options.orientation,\n                    'position': options.position,\n                    'scale': options.scale,\n                    'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n                };\n                this.addSplatBuffers([splatBuffer], [splatBufferOptions], options.showLoadingSpinner).then(() => {\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch(() => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                reject(new Error(`Viewer::loadFile -> Could not load file ${path}`));\n            });\n        }, loadPromise.abortHandler);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} files Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    loadFiles(files, showLoadingSpinner = true, onProgress = undefined) {\n        const fileCount = files.length;\n        const percentComplete = [];\n        if (showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingSpinner) {\n                if (totalPercent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, 'downloading');\n        };\n\n        const loadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < files.length; i++) {\n            const loadPromise = this.loadFileToSplatBuffer(files[i].path, files[i].splatAlphaRemovalThreshold,\n                                                           downloadProgress.bind(this, i));\n            abortHandlers.push(loadPromise.abortHandler);\n            loadPromises.push(loadPromise.promise);\n        }\n        const abortHandler = () => {\n            for (let abortHandler of abortHandlers) {\n                abortHandler();\n            }\n        };\n        return new AbortablePromise((resolve, reject) => {\n            Promise.all(loadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingSpinner) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', 'processing');\n                this.addSplatBuffers(splatBuffers, files, showLoadingSpinner).then(() => {\n                    if (onProgress) onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch(() => {\n                if (showLoadingSpinner) this.loadingSpinner.hide();\n                reject(new Error(`Viewer::loadFiles -> Could not load one or more files.`));\n            });\n        }, abortHandler);\n    }\n\n    /**\n     *\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    loadFileToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined) {\n        const downloadProgress = (percent, percentLabel) => {\n            if (onProgress) onProgress(percent, percentLabel, 'downloading');\n        };\n        if (SplatLoader.isFileSplatFormat(path)) {\n            return new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n        } else if (path.endsWith('.ply')) {\n            return new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n        } else {\n            return AbortablePromise.reject(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${path}`));\n        }\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        let loadPromise;\n        let loadCount = 0;\n\n        return function(splatBuffers, splatBufferOptions = [], showLoadingSpinner = true) {\n            this.splatRenderingInitialized = false;\n            loadCount++;\n            const performLoad = () => {\n                return new Promise((resolve) => {\n                    if (showLoadingSpinner) {\n                        this.loadingSpinner.show();\n                        this.loadingSpinner.setMessage(`Processing splats...`);\n                    }\n                    window.setTimeout(() => {\n                        if (this.sortWorker) this.sortWorker.terminate();\n                        this.sortWorker = null;\n                        this.sortRunning = false;\n                        this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions);\n                        this.setupSortWorker(this.splatMesh).then(() => {\n                            loadCount--;\n                            if (loadCount === 0) {\n                                if (showLoadingSpinner) this.loadingSpinner.hide();\n                                this.splatRenderingInitialized = true;\n                            }\n                            resolve();\n                        });\n                    }, 1);\n                });\n            };\n            if (!loadPromise) {\n                loadPromise = performLoad();\n            } else {\n                loadPromise = loadPromise.then(() => {\n                    return performLoad();\n                });\n            }\n            return loadPromise;\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions) {\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        return new Promise((resolve) => {\n            const PrecomputedDistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const sortWorker = createSortWorker(splatCount, this.sharedMemoryForWorkers, this.integerBasedSort);\n            sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    const centers = this.integerBasedSort ? this.splatMesh.getIntegerCenters(true) : this.splatMesh.getFloatCenters(true);\n                    sortWorker.postMessage({\n                        'centers': centers.buffer\n                    });\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, splatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, splatCount);\n                        this.sortWorkerPrecomputedDistances = new PrecomputedDistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                                e.data.precomputedDistancesOffset,\n                                                                                                splatCount);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(splatCount);\n                        this.sortWorkerPrecomputedDistances = new PrecomputedDistancesArrayType(splatCount);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    this.sortWorker = sortWorker;\n                    resolve();\n                }\n            };\n        });\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            cancelAnimationFrame();\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n            const hasRenderables = (scene) => {\n                for (let child of scene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (hasRenderables(this.scene)) this.renderer.render(this.scene, this.camera);\n            this.renderer.render(this.splatMesh, this.camera);\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderingInitialized) return;\n        if (this.controls) this.controls.update();\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMeshUniforms();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            const fadeInSpeed = 10.0;\n            const fadeOutSpeed = 2.5;\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n\n            const cameraPos = this.camera.position;\n            const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\n\n            const cameraLookAt = this.controls.target;\n            const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\n\n            const cameraUp = this.camera.up;\n            const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\n\n            if (this.showMeshCursor) {\n                const cursorPos = this.sceneHelper.meshCursor.position;\n                const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\n                this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\n            } else {\n                this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\n            }\n\n            this.infoPanelCells.fps.innerHTML = this.currentFPS;\n            this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n            const renderPct = this.splatRenderCount / splatCount * 100;\n            this.infoPanelCells.renderSplatCount.innerHTML =\n                `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\n\n            this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n        let runCount = 0;\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return function(force = false, gatherAllNodes = false) {\n            if (this.sortRunning) return;\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force && queuedSorts.length === 0 && runCount > 0) {\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            this.sortRunning = true;\n            this.splatRenderCount = this.gatherSceneNodesForSort(gatherAllNodes);\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n            if (queuedSorts.length === 0) {\n                for (let partialSort of partialSorts) {\n                    if (angleDiff < partialSort.angleThreshold) {\n                        for (let sortFraction of partialSort.sortFractions) {\n                            queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                        }\n                        break;\n                    }\n                }\n                queuedSorts.push(this.splatRenderCount);\n            }\n            const sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n            const sortMVPMatrix = this.integerBasedSort ? SplatMesh.getIntegerMatrixArray(mvpMatrix) : mvpMatrix.elements;\n            const sortMessage = {\n                'modelViewProj': sortMVPMatrix,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n            runCount++;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const tempMatrix4 = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToRender = 125;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\n\n            const splatTree = this.splatMesh.getSplatTree();\n            let nodeRenderCount = 0;\n            let splatRenderCount = 0;\n            const nodeCount = splatTree.nodesWithIndexes.length;\n            for (let i = 0; i < nodeCount; i++) {\n                const node = splatTree.nodesWithIndexes[i];\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\n                const distanceToNode = tempVector.length();\n                tempVector.normalize();\n\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                const ns = nodeSize(node);\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                    continue;\n                }\n                splatRenderCount += node.data.indexes.length;\n                nodeRenderList[nodeRenderCount] = node;\n                node.data.distanceToNode = distanceToNode;\n                nodeRenderCount++;\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                else return 1;\n            });\n\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const windowSizeInts = node.data.indexes.length;\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset -= windowSizeBytes;\n            }\n\n            return splatRenderCount;\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSceneFromFile(path, options = {}) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        const loadPromise = this.viewer.loadFile(path, options);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} files Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addScenesFromFiles(files, showLoadingSpinner) {\n        if (showLoadingSpinner !== false) showLoadingSpinner = true;\n        const loadPromise = this.viewer.loadFiles(files, showLoadingSpinner);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    static onBeforeRender(viewer, renderer, scene, camera) {\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["fbf","SplatBuffer","static","BytesPerCenter","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","Float32Array","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerCenter","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","bind","linkBufferArrays","FloatArray","Uint16Array","centerArray","CenterComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","f","THREE","DataUtils","fromHalfFloat","getHeaderBufferData","getSplatBufferData","getSplatCount","getSplatCenter","index","outCenter","transform","bucket","centerBase","sf","sr","bucketIndex","Math","floor","x","y","z","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","outScale","outRotation","scaleBase","rotationBase","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","fillSplatCenterArray","outCenterArray","destOffset","center","i","centerSrcBase","centerDestBase","fillSplatCovarianceArray","covarianceArray","scale","rotation","Quaternion","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","tempMatrix4","setFromMatrix4","transpose","premultiply","covBase","CovarianceSizeFloats","elements","fillSplatColorArray","outColorArray","colorSrcBase","colorDestBase","AbortablePromise","promiseFunc","abortHandler","promiseResolve","promiseReject","promise","Promise","resolve","reject","args","error","then","onResolve","onResolveResult","args2","catch","onFail","abort","data","floatView","int32View","Int32Array","buffer","uintEncodedFloat","fetchWithProgress","path","onProgress","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","clamp","val","min","max","getCurrentTime","performance","now","UncompressedSplatArray","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","f_dc_0","f_dc_1","f_dc_2","opacity","addSplat","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","SplatCompressor","minimumAlpha","blockSize","createEmptyUncompressedSplatArray","uncompressedSplatArrayToSplatBuffer","splatArray","validSplats","alpha","buckets","computeBucketsForUncompressedSplatArray","paddedSplatCount","headerSize","header","centerBuffer","scaleBuffer","colorBuffer","rotationBuffer","blockHalfSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","fromArray","splats","row","invalidSplat","rot","quat","normalize","w","thf","toHalfFloat","sub","round","rgba","Uint8ClampedArray","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","halfBlockSize","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","bucketId","toArray","hasOwnProperty","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","console","log","readChunkSize","Error","headerChunk","decode","endHeaderTestChunk","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","startTime","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","type","exp","SH_C0","splatBuffer","endTime","PlyLoader","loadFromURL","fileName","plyFileData","SplatLoader","downLoadLink","isFileSplatFormat","isCustomSplatFormat","isStandardSplatFormat","endsWith","splatCompressor","parseStandardSplatToUncompressedSplatArray","inBuffer","inCenterSizeBytes","inScaleSizeBytes","inColorSizeBytes","inBase","inCenter","inScale","inColor","inRotation","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","dispose","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","spinnerDivContainerOuter","className","display","spinnerDivContainer","spinnerDiv","messageDiv","innerHTML","show","hide","setContainer","removeChild","zIndex","setMessage","msg","ArrowHelper","Object3D","dir","color","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","material","source","geometry","SceneHelper","scene","splatRenderTarget","renderTargetCopyMaterial","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","updateSplatRenderTargetForRenderDimensions","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","children","forEach","child","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","sphereMesh","updateFocusMarker","viewport","matrixWorld","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","debugRoot","createDebugMeshes","secondaryDebugRoot","createSecondaryDebugMeshes","renderOrder","debugMeshRoot","createMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","hitClone","Raycaster","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","localRay","splatMesh","outHits","splatTree","getSplatTree","rootNode","castRayAtSplatTreeNode","sort","a","hit","tempCenter","tempScale","tempRotation","tempHit","scaleEpsilon","node","boundingBox","indexes","splatGlobalIndex","idGen","SplatTreeNode","depth","id","Box3","SplatTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","processSplatMesh","filterFunc","globalSplatIndexToLocalSplatIndexMap","globalSplatIndexToSplatBufferIndexMap","validSplatCount","processNode","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","renderer","splatBuffers","splatBufferOptions","splatBufferTransforms","splatDataTextures","distancesTransformFeedback","program","centersBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","buildMaterial","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","alphaTest","NormalBlending","buildGeomtery","maxSplatCount","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildSplatBufferTransforms","options","positionArray","splatBufferTransform","compose","buildSplatIndexMaps","localSplatIndexMap","Map","splatBufferIndexMap","totalSplatCount","s","buildSplatTree","time","splatColor","Vector4","splatIndex","splatBufferIndex","getSplatBufferIndexForSplat","splatAlphaRemovalThreshold","timeEnd","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","build","keepExistingSplatBufferTransforms","disposeMeshData","getTotalSplatCountForSplatBuffers","indexMaps","setupDistancesComputationTransformFeedback","resetDataFromSplatBuffer","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","uploadSplatDataToTextures","updateGPUCentersBufferForDistancesComputation","covariances","centers","colors","fillSplatDataArrays","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","RGBAIntegerFormat","internalFormat","size","centerColors","updateRenderIndexes","globalIndexes","renderSplatCount","attributes","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","getSplatDataTextures","gl","getContext","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","currentRenderer","currentSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","VERTEX_SHADER","FRAGMENT_SHADER","errors","getShaderInfoLog","vsSource","currentVao","getParameter","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","DYNAMIC_COPY","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","intCenters","getIntegerCenters","STATIC_DRAW","floatCenters","getFloatCenters","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iViewProjMatrix","getIntegerMatrixArray","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSplatBufferTransformForSplat","padFour","componentCount","paddedFloatCenters","matrixElements","intMatrixArray","Constants","sortWorker","self","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","onmessage","e","postMessage","sortSetupComplete","renderCount","splatRenderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","BytesPerInt","BytesPerFloat","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortTime","transferBuffers","sortedIndexes","sortedIndexesOut","sortEndTime","init","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForViewProjMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","createSortWorker","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","Viewer","cameraUp","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","window","gpuAcceleratedSort","isMobile","sharedMemoryForWorkers","controls","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","loadingSpinner","usingExternalCamera","usingExternalRenderer","initialized","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","precision","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","observe","Scene","onMouseUp","setupInfoPanel","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","padding","backgroundColor","border","fontFamily","fontSize","textAlign","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","prepend","updateSplatMeshUniforms","projectionMatrix","loadFile","showLoadingSpinner","loadPromise","loadFileToSplatBuffer","suffix","orientation","addSplatBuffers","loadFiles","files","fileCount","percentComplete","downloadProgress","fileIndex","totalPercent","loadPromises","abortHandlers","all","loadCount","performLoad","setTimeout","terminate","addSplatBuffersToMesh","setupSortWorker","allSplatBuffers","allSplatBufferOptions","frustumCulled","PrecomputedDistancesArrayType","sortCanceled","start","requestAnimationFrame","stop","cancelAnimationFrame","render","savedAuoClear","hasRenderables","updateForDropInMode","updateSplatSort","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","currentTime","lastRendererSize","currentRendererSize","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","cameraPos","cameraPosString","cameraPosition","cameraLookAt","cameraLookAtString","cameraUpString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","runCount","partialSorts","angleThreshold","sortFractions","force","gatherAllNodes","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","gatherSceneNodesForSort","partialSort","sortFraction","shift","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","tempMax","nodeSize","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","navigator","userAgent","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","addSceneFromFile","addScenesFromFiles","colorWrite","mesh"],"mappings":"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"}